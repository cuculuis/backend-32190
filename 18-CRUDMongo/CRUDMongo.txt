0- Iniciamos el servidor y la base de datos. Creamos la DB "ecommerce" y creamos dos colecciones "mensajes" y "productos" (Con el punto 1 creamos las colecciones).
    - Corremos el siguiente comando en un CMD
        mongod --dbpath "./18-CRUDMongo"
    - Y el siguiente comando en otro
        mongosh
    
    - Hacemos el siguiente comando para crear la base de datos.
        use <nombreDeDB>

        use ecommerce

1- Creamos las colecciones 

    db.<nombreDeColeccion>.insertMany()
    db.<nombreDeColeccion>.insertOne()

2- Definimos las claves de las colecciones.

db.productos.insertMany([
    {nombre: "Manzana", precio: 300, thumbnail: "https://manzana.com", stock: 100}, 
    {nombre: "Camisa", precio: 2500, thumbnail: "https://camisa.com", stock: 20}, 
    {nombre: "Zapatos", precio: 4500, thumbnail: "https://zapatos.com", stock: 10}, 
    {nombre: "Libro", precio: 1500, thumbnail: "https://libro.com", stock: 30}, 
    {nombre: "Cámara", precio: 4900, thumbnail: "https://camara.com", stock: 5}, 
    {nombre: "Cafetera", precio: 3500, thumbnail: "https://cafetera.com", stock: 15}, 
    {nombre: "Botella de vino", precio: 900, thumbnail: "https://vinoteca.com", stock: 25}, 
    {nombre: "Silla de oficina", precio: 2800, thumbnail: "https://silla.com", stock: 7}, 
    {nombre: "Sábanas", precio: 1100, thumbnail: "https://sabanas.com", stock: 40}, 
    {nombre: "Cepillo", precio: 600, thumbnail: "https://cepillo.com", stock: 12}
    ])

db.mensajes.insertMany([
    {email: "maria@hotmail.com", message: "¡Hola a todos!", timestamp: ISODate()},
    {email: "juan@yahoo.com", message: "¿Qué tal estás?", timestamp: ISODate()},
    {email: "ana@gmail.com", message: "¿Han visto la nueva película?", timestamp: ISODate()},
    {email: "carlos@hotmail.com", message: "Necesito ayuda con este proyecto", timestamp: ISODate()},
    {email: "lucia@yahoo.com", message: "¿Ana, podrías reservar una mesa en el restaurante?", timestamp: ISODate()},
    {email: "pablo@gmail.com", message: "Juan, te espero en el parque a las 4 pm", timestamp: ISODate()},
    {email: "ana@yahoo.com", message: "Feliz cumpleaños Carlos, espero que tengas un gran día", timestamp: ISODate()},
    {email: "jose@hotmail.com", message: "Gracias por tu ayuda ana, te lo agradezco mucho", timestamp: ISODate()},
    {email: "raquel@gmail.com", message: "No puedo creer que hayamos pasado tanto tiempo juntos", timestamp: ISODate()},
    {email: "carla@yahoo.com", message: "Estoy emocionada por nuestra próxima reunión", timestamp: ISODate()}
])

3- Listamos las colecciones 
    db.productos.find()
    db.mensajes.find()

4- Mostrar la cantidad de documentos registrados en cada colección.
    
    db.<nombreDeColeccion>.countDocuments()
    db.<nombreDeColeccion>.estimatedDocumentCount()

    db.productos.countDocuments()
    db.mensajes.countDocuments()

    OR

    db.productos.estimatedDocumentCount()
    db.mensajes.estimatedDocumentCount()

5- Realizar un CRUD
    a) Agregar un producto más a la colección de productos
        db.productos.insertOne({nombre: "iPhone 13 Pro Max", precio: 1499, thumbnail: "https://www.apple.com", stock: 20})

    b) 
        i) Listar los productos con precio menor a 1000 pesos.
            db.productos.find({precio: {$lt: 1000}}) //Solo si no incluye los 1000
            db.productos.find({precio: {$lte: 1000}}) //Solo si incluye los 1000

        ii) Listar los productos con precio entre los 1000 a 3000 pesos.
            db.productos.find({precio: {$gte: 1000, $lte: 3000}}) //Solo si incluye los 1000 y los 3000
            db.productos.find({precio: {$gt: 1000, $lt: 3000}}) //Solo si no incluye los que valgan 1000 y los que valgan 3000


        iii) Listar los productos con precio mayor a 3000 pesos.
            db.productos.find({precio: {$gte: 3000}}) //Solo si incluye los 3000
            db.productos.find({precio: {$gt: 3000}}) //Solo si no incluye los que valgan 3000

        iv) Realizar una consulta que traiga sólo el nombre del tercer producto más barato.
            db.productos.find({}, {nombre: 1, _id: 0}).sort({precio: 1}).limit(1).skip(2)

    c) Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.
        db.productos.updateMany({}, {$set: {stock: 100}})

    d) Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.
        db.productos.updateMany({precio: {$gt: 4000}}, {$set: {stock: 0}})  //Solo si no incluye los que valgan 4000
        db.productos.updateMany({precio: {$gte: 4000}}, {$set: {stock: 0}})  //Solo si incluye los que valgan 4000
    
    e) Borrar los productos con precio menor a 1000 pesos.
        db.productos.deleteMany({precio: {$lt: 1000}}) //Sin incluir los que valgan 1000
        db.productos.deleteMany({precio: {$lte: 1000}}) //Incluyendo los que valgan 1000
    
6) Crear un usuario "pepe" clave: "asd456" que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.
    - Cambiamos a la db admin para generar el usuario "pepe" 
        use admin
        db.createUser({
            user: "pepe",
            pwd: "asd456",
            roles: [
                { role: "read", db: "ecommerce" }
            ]
        })

    - Reiniciamos el servidor de DB ("Ctrl + C" en el servidor) ("Ctrl + C" 2 veces en el de mongosh).
        mongod --dbpath "./18-CRUDMongo" --auth

    - En el otro CMD colocamos:
        mongosh -u pepe -p asd456

    - Comprobamos que solo pueda leer
        db.productos.deleteMany({precio: {$gt: 1000}}) //No puede
        db.productos.updateMany({precio: {$gt: 4000}}, {$set: {stock: 10}}) //No puede

        db.productos.find() //Si puede.





